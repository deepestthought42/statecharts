* statecharts paper 
#+INTERLEAVE_PDF: statechart-paper.pdf
- statecharts is designed to describe a reactive system 

- states and events are /a priori/ a natural medium for describing the dynamic behaviour of
  a complex system

- statecharts main advantage: not all combinations of states have to be represented
  explicitly

- states can be clustered in a superstate
- states can be orhtogonal (or independent)
- states can be refined

** technical summary of statecharts
Statecharts is the extension of conventional state diagrams by AND/OR decomposition of
states together with inter-level transitions, and a broadcast mechanism for communication
between concurrent components.

/statecharts = state-diagrams + depth + orthogonality + broadcast-cummunication/
* Chart elements
** Arrow
Represents a state change upon receiving an event that is used to label the arrow.
** 
* Things to think about
** TODO how to manage broadcasts
Specifically: How to manage the order of broadcasts.

** TODO different entries into different states
let's go through this by the different kinds of states --> actually, this should be a
problem when having flattened the graph

** TODO event triggers a transition from every state
* Definitions 
** System
A regularly interacting or interdependent group of items forming a unified whole [fn:1].
** State 
<<state>> The state of a system is defined by the value of the variables that describe the
system.
** Event
We use the physical definition of an event: an event is the instantaneous physical
situation or occurrence associated with a point in spacetime (that is, a specific place
and time). A state transition is explicity defined as an event. 
** Transition
A change of state.

** reactive system
<<reactive>> As opposed to a transformational system, a reactive system is characterized
by being event driven, continuously having to react to external and internal stimuli.
 
Behaviour of a reactive system is the set of allowed seuences of input and output events,
conditions, actions, and additional information such as timing constraints.

* Implementation 
** ideas floating
*** for C backend: use plain enums
*** write backend independent binary format
- protobuf ?
** redoing how I define a statechart with a DSL
first thing to come up with, elements of the DSL
*** Elements of the DSL
- [ ] leaf state :: inidicated by :state, :s, :st
- [ ] orthogonal state :: indicated by :p, :orth, :orthogonal, :and, :.
- [ ] cluster :: indicated by :or, :c, :cluster, :+
- [ ] transition :: indicated by :t, :->, :trans, :transition
- [ ] condition :: indicated by :if, :given, :when
- [ ] actions :: indicated by :on-entry, :on-exit, :
* development logbook
** [2018-02-23 Fri 21:22] associate actions w/transitions instead of w/states
- first thing: find where two statenames differ
#+BEGIN_SRC lisp
(in-package #:statecharts)


(defstatechart (test-states)
  (c "test" (d "X")
    (c "X" (d "A")
      (s "A"  :entry (sc:act "adf" () (format t "Yes")))
      (s "B")
      (-> "alpha" "A" "B")
      (-> "beta" "B" "A"))
    (c "Y" (d "A")
      (s "A")
      (s "B")
      (-> "alpha" "B" "A"))
    (c "Z" (d "A")
      (s "A")
      (s "B"))
    (-> "gamma" "Y" "X")))


(create-fsm-runtime test-states)
#+END_SRC
** [2018-04-12 Thu 20:15] changed stuff, but now I don't know what is going on
   - ok, need to go through all my types and add a copy-obj method since
     I am just widely copying stuff now
   - have to think about what that means for function objects
   - might be best to store symbols instead of objects and then grab
     (via symbol-function) the function object when constructing the
     fsm


* TODOs 
** TODO guard against two substates with the same name
** DONE write function to parse conditionals 
** DONE given the transitions for an event, create cond to final state mapping
** DONE how to describe what to do upon max no of reentries ?
   *A*: implement this as a conditional using a mehtod on the environment: no-of-reentries

** DONE keep track of no of reentries
- incr. when reentry
- set to zero when exit

** DONE for transitions with reentry, find the correct actions to execute
** TODO implement history states
- easiest way (at least conceptually) :: add a state that fires an event to the
  last state
- the keep up order of events, make sure that history events have highest
  priority (i.e. get executed before anything else) 
- first idea for keep priority of history events highest :: separate queue
- I have a vague intuition that there might be a different solution
  where every cluster has a "shadow" cluster keeping track of the
  history, but the other option seems to be a lot easier and as
  long as it is not prohibitive in terms of performance ...
- actually, could just introduce a transition with a clause for
  every substate, certainly the easiest to implement (maybe a bit
  slower for a dynamic runtime, but for performance critical
  writing static code is probably called for anyways)
- I might still need a separate queue for this, though
** what is needed for the transition object
- easiest might be to keep a history for every transition the
  content of which can only be the states that can be reached, so
  we can branch on that
- since we know the initial state fsm state as well, we can
  completely determine the next fsm state when keeping it with the
  transitions based on initial and final state
- so what we need is to set the history for the transition when
  exiting the final states associated with it
- each transition gets a seperate history so when exiting the fsm
  state the histories need to be set
- this can be done by just adding exit actions to the fsm after
  determining the final state of the transition
- setting the history means changing the final state of the target
- how do I mark history states when resolving partial states ?
** TODO improve performance
let's go at the performance problem in a more structured way:
*** STARTED measure and document in which functions we spent the most time
let's profile things. If I remember correctly, most of the time is
spent comparing state-names. Let's check that is true.

#+BEGIN_SRC lisp
(in-package :statecharts)

(sb-profile:reset)

(sb-profile:profile statecharts::%create-state-chart
		    sc.fsm::set-transitions-for-states)
#+END_SRC

and then create a statechart (or a fixed number to get a more reliable
count):
#+NAME: measurement-call
#+BEGIN_SRC lisp
(require 'sb-sprof)
(in-package #:statecharts)

(defclass test-env (environment)
  ((counter :accessor counter :initarg :counter
	    :initform 0)))



(dotimes (v 2000)
  (defstatechart (sc/test)
    (sc:o :outer ()
      (sc:c :left (sc:d :test)
	(sc:c :test (sc:h :a)
	  (sc:s :a :reentry (act (e) (incf (counter e)))
		   :exit (act (e) (setf (counter e) 0)))
	  (sc:s :b)
	  (sc:s :c)
	  (sc:-> :ev :a
		 (cond (e)
		       ((>= (counter e) 2) :b)
		       (otherwise :a)
		       (if-in-state '(:/ :outer :right :a) :b)))
	  (sc:-> :ev_2 :a
		 (if-in-state '(:/ :outer :right :b) :c))
	  (sc:-> :ev :b :c)
	  (sc:-> :ev :c :a))
	(sc:s :b)
	(sc:s :c)
	(sc:-> :in :b :test)
	(sc:-> :in :c :test)
	(sc:-> :out :test :b)
	(sc:-> :out :b :c)
	(sc:-> :out :c :b))
      (sc:c :right (sc:d :a)
	(sc:s :a)
	(sc:s :b)
	(sc:-> :ev_r :a :b)
	(sc:-> :ev_r :b :a)))))

#+END_SRC

#+RESULTS: measurement-call
: NIL

#+BEGIN_SRC lisp :results none
(sb-profile:report)
#+END_SRC

| seconds |    gc | consed      | calls  | sec/call | name                                        |
|---------+-------+-------------+--------+----------+---------------------------------------------|
|   0.352 | 0.000 | 132,531,296 | 1,101  | 0.000320 | STATECHARTS.FSM::SET-TRANSITIONS-FOR-STATES |
|   0.024 | 0.000 | 17,428,624  | 24,222 | 0.000001 | STATECHARTS.CHART::COMPUTE-TRANSITIONS      |
|   0.013 | 0.000 | 7,107,200   | 1,101  | 0.000012 | STATECHARTS.FSM::CREATE-STATES              |
|   0.000 | 0.000 | 8,040,768   | 24,222 | 0.000000 | STATECHARTS.CHART::COMPUTE-SUBSTATES        |
|---------+-------+-------------+--------+----------+---------------------------------------------|
|   0.390 | 0.000 | 165,107,888 | 50,646 |          | Total                                       |


So, most of the time is spent in set-transitions-for-states. Let's dig
into that function a bit:


#+BEGIN_SRC lisp :results none
(in-package :sc.fsm)

(sb-profile:reset)

(sb-profile:unprofile)
(sb-profile:profile set-transition-target)
#+END_SRC

#+CALL: measurement-call()

#+RESULTS:
: NIL

#+BEGIN_SRC lisp :results none
(sb-profile:report)
#+END_SRC


  8.000001e-9s/call, 1.5699999e-6s total profiling, 7.42e-7s internal profiling
| seconds |    gc | consed      | calls   | sec/call | name                                                           |
|---------+-------+-------------+---------+----------+----------------------------------------------------------------|
|   0.510 | 0.000 | 212,415,008 | 72,000  | 0.000007 | STATECHARTS.FSM::SET-TRANSITION-TARGET                         |
|   0.072 | 0.000 | 16,940,032  | 20,000  | 0.000004 | STATECHARTS.FSM::FIND-EVENTS/TRANSITION-ORIGINATING-FROM-STATE |
|   0.011 | 0.000 | 0           | 2,000   | 0.000006 | STATECHARTS.FSM::SET-TRANSITIONS-FOR-STATES                    |
|   0.001 | 0.000 | 12,745,712  | 64,000  | 0.000000 | STATECHARTS.FSM::COMBINE-TRANS-BY-GUARDS                       |
|---------+-------+-------------+---------+----------+----------------------------------------------------------------|
|   0.594 | 0.000 | 242,100,752 | 158,000 |          | Total                                                          |

estimated total profiling overhead: 0.25 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.5699999e-6s total profiling, 7.42e-7s internal profiling

ok, let's dig into set-transition-target:

#+BEGIN_SRC lisp :results none
(in-package :sc.fsm)

(sb-profile:reset)

(sb-profile:unprofile)
(sb-profile:profile  find-state-for
		     determine-final-states sc.key::from-chart-state
		     sc.chart::get-states-described-by-name)
#+END_SRC

#+CALL: measurement-call()
#+RESULTS:
: NIL

#+BEGIN_SRC lisp :results none
(sb-profile:report)
#+END_SRC

| seconds |    gc | consed      | calls     | sec/call | name                                    |
|---------+-------+-------------+-----------+----------+-----------------------------------------|
|   0.286 | 0.000 | 59,127,712  | 68,000    | 0.000004 | STATECHARTS.FSM::DETERMINE-FINAL-STATES |
|   0.000 | 0.007 | 120,527,216 | 1,284,000 | 0.000000 | STATECHARTS.STATE-KEY::FROM-CHART-STATE |
|   0.000 | 0.000 | 0           | 164,000   | 0.000000 | STATECHARTS.FSM::FIND-STATE-FOR         |
|---------+-------+-------------+-----------+----------+-----------------------------------------|
|   0.286 | 0.007 | 179,654,928 | 1,516,000 |          | Total                                   |


so, determine-final-states, digging deeper

let's use the statistical profiler for this:

#+BEGIN_SRC lisp

#+END_SRC

*** DONE same idea, just write it down
boils down to:
- enumerate /or/ state and all /or/ sub-states thereof
- create bitfield to record /and/ states and enumerate all /or/ states
  thereof

but: hwo do I handle or states that only specify a super-state ? 

*** DONE which one is better, integer or bitvector
let's see which one is faster
#+BEGIN_SRC lisp
(defparameter *no* (round 1e7))



(defun compare-arr (a b)
  (dotimes (v *no*)
    (declare (type (simple-array bit) a b)
	     (type fixnum v *no*))
    (bit-and a b)))


(defun compare (a b)
  (declare (optimize (speed 3) (safety 1) (space 0) (debug 0)))
  (dotimes (v *no*)
    (declare (type number a b)
	     (type fixnum v *no*))
    (= b (logand a b))))

(time (compare (+ 1024 256 128 32 16 1) (+ 256 128 64)))

(time (compare-arr (make-array 10 :element-type 'bit
				  :initial-contents '(1 0 1 1 0 1 1 0 0 1))
		   (make-array 10 :element-type 'bit
				  :initial-contents '(0 0 1 1 1 0 0 0 0 0))))
#+END_SRC

integers it is
*** DONE implement bitvector only statename function
- create superstate bitvector to operate on
- printing of superstate to make life somewhat easier
- then: all those computation should be trivial now
*** DONE method to compute excluded ids for /orthogonal/ state-keys
- to then be used to derive non-specified /orthogonal/ states from the
  initial-state when resolving transition targets
**** log
- need to remind myself of what I wanted to do
- ok, I think I remember, but do we want to specify specified or
  not-specified states ? Well, can be changed quickly
- remember where I stopped ... for the exclusion id I need to gather
  the bitmask from /all/ the substates down the tree, which might be
  easiest when building the dsl elements
- yes, let's do that when creating dsl elements and let's use an
  environment global variable to do so (maybe a plist ?)
- I changed a bunch of stuff to accomodate various things and also
  rename weirdly choosen things (like identifier --> state-bits)
- so, next thing would be to actually fill sub-states in chart objects
  so I can calculate excluded-state-bits for resolving default states
- <2020-05-16 Sat 11:57> defstatechart compiles, but the transitions
  in the fsm states aren't filled
*** DONE rewrite state construction to set bits upon chart construction
- instead of setting state bits and sub-state bits when construction
  the state objects, calculate them when constructing the chart itself
- this will facilitate creating a statechart from components (which
  worked before the rewrite)
- first: remove old state setting code
- introduce dsl-compute.lisp -> asd
- now, what does it need to do: 
  - go through the chart objects and set the state-bits
  - do so leaf first to be able to calcualte sub-states

- test:
#+BEGIN_SRC lisp
(in-package :statecharts)

(defparameter /chime-status/
  (c "chime status" (d "disabled")
    (s "disabled")
    (c "enabled" (d "quiet")
      (s "quiet")
      (s "beep")
      (-> "T is whole hour" "quiet" "beep")
      (-> "2 seconds in beep" "beep" "quiet"))
    (-> "d" "disabled" "enabled")
    (-> "d" "enabled" "disabled")))



(sc.dsl::calculate-state-bits /chime-status/ (make-instance 'sc.dsl::context))
#+END_SRC
*** DONE fix issue with three and states (?)
#+BEGIN_SRC lisp
(in-package :statecharts)
(defstatechart (three)
  (sc:o :o ()
    (c :1 (d :a)
      (s :a)
      (s :b)
      (-> :ev :a :b)
      (-> :ev :b :a))
    (c :2 (d :a)
      (s :a)
      (s :b)
      (-> :ev :a :b))
    (c :3 (d :a)
      (s :a)
      (s :b))))
#+END_SRC

#+RESULTS:
: THREE
*** TODO resolve when coming from outer state
#+BEGIN_SRC lisp
(in-package :statecharts)

(defstatechart (/test/)
  (c "watch" (d "dead")
    (s "dead")
    (o "reg outer" ()
      (c "regular" (d "time")
	(s "time")
	(s "date")
	(c "update" (h "sec")
	  (s "sec")
	  (s "1 min")
	  (s "10 min")
	  (s "hr")
	  (s "month")
	  (s "date")
	  (s "day")
	  (s "year")
	  (s "mode")
	  (-> "c" "sec" "1 min")
	  (-> "c" "1 min" "10 min")
	  (-> "c" "10 min" "hr")
	  (-> "c" "hr" "month")
	  (-> "c" "month" "date")
	  (-> "c" "date" "day")
	  (-> "c" "day" "year")
	  (-> "c" "year" "mode"))
	(-> "2 min in update" "update" "time")
	(-> "c" '("update" "mode") "time")
	(-> "b" "update" "time")
	(-> "d" "time" "date")
	(-> "d" "date" "time"))
      (c "beep-test" (d "00")
	(s "00")
	(s "10")
	(s "01")
	(s "beep")
	(-> "b" "00" "10")
	(-> "^b" "10" "00")
	(-> "b" "01" "beep")
	(-> "^b" "beep" "01")
	(-> "d" "00" "01")
	(-> "^d" "01" "00")
	(-> "d" "10" "beep")
	(-> "^d" "beep" "10")))))

#+END_SRC

*** NA include initial-state in calculation again
- those should be resolved by choosing the default state
*** DONE rework id naming
identifier is a bs name
*** DONE parts of selecting the correct final state
- final states specified by all the transitions targets (joined
  transitions targets)
- within this, there can/will be unspecified substates, these need to
  be selected for by default states
  - this can be described by bits-covered for the joined transition
    targets
- everything that is not (bits-)covered by the joined transition
  targets, needs to be selected from the initial-state we are coming
  from
  - to select these we need a bits uncovered
*** TODO select history states + default state in loop
- which would also make history states work again
*** TODO look if difference in remove-guared is what we want
* Footnotes

[fn:1] https://www.merriam-webster.com/dictionary/system

